# This is a basic workflow to help you get started with Actions

name: CI to Docker Hub && CI to Aws Deployment - Client 

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check Out Repo 
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./Source/UI/
          file: ./Source/UI/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/todo_client:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}


  deployment:
    steps:
      - uses: actions/checkout@v2 
      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.AWS_HOSTNAME  }}
            USER_NAME : ${{ secrets.AWS_USER_NAME  }}
            
        run: |
            echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
            ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME}
            minikube start
            echo "minikube started"
            sleep 10
            alias kubectl="minikube kubectl --"
            minikube kubectl -- get po -A
            kubectl create deployment client --image=bolatahmett/todo_client:latest
            sleep 5
            kubectl expose deployment client --type=NodePort --port=9000
            sleep 10
            kubectl get services client
            sleep 20
            minikube kubectl -- get po -A
            sleep 5
            kubectl port-forward service/client 9000:9000 &
            echo "done"
            sleep 10